#!/usr/bin/python
from mdv.sec.sekt import SektCommand

import os
import optparse
import tempfile
import subprocess

DESCR = """Manages information about updates.

An "update" holds information about packages, CVEs, distros, tickets and
anything else that is related to a package update in Mandriva Linux.

All this information is then used to perform real actions regarding the
update, such as generating the advisory text, opening the ticket, etc.

So far, it only can create "updates" and bind some information on it.

When --edit receives no options besides the update name, it will open an
editor with the raw update file.
"""

USAGE = """
  %prog --create <name> [create options]
  %prog --list
  %prog --show <name>
  %prog --edit <name>"""

class Kcve(SektCommand):

    usage = USAGE
    descr = DESCR

    def init_parser(self, parser):
        super(Kcve, self).init_parser(parser)
        group = optparse.OptionGroup(parser, "Main operations")

        group.add_option("-c", "--create", action="store_true",
                default=False, help="create an update named NAME")
        group.add_option("-l", "--list", action="store_true",
                default=False, help="list active updates")
        group.add_option("-s", "--show", action="store_true",
                default=False, help="shows an update")
        group.add_option("-e", "--edit", action="store_true",
                default=False, help="edits an update")
        group.add_option("-D", "--delete", action="store_true",
                default=False, help="deletes an update")
        parser.add_option_group(group)

        group = optparse.OptionGroup(parser, "Options for --create and "
                "--edit")
        group.add_option("-p", "--package", type="string", metavar="PKGNAME",
                help="associate a package with the update")
        group.add_option("-d", "--distro", default=[], metavar="DISTRO",
                help="distro version", action="append")
        group.add_option("-C", "--cve", type="string", metavar="CVEID",
                help="a CVE number")
        group.add_option("-t", "--ticket", type="string",
                metavar="TICKETNUMBER",
                help="a bugzilla ticket")
        group.add_option("-m", "--embargo", type="string", metavar="DATE",
                help="date when the embargoed update is lifted (DD/MM or "
                "DD/MM/YYYY)")
        parser.add_option_group(group)

    def run(self):
        if self.opts.create:
            self.create()
        elif self.opts.list:
            self.list()
        elif self.opts.edit:
            self.edit()
        elif self.opts.delete:
            self.delete()
        else:
            # elif self.opts.show:
            self.show()

    def create(self):
        for name in self.args:
            self.tasks.create_update(name, packages=self.opts.package,
                    distros=self.opts.distro, cves=self.opts.cve,
                    embargo=self.opts.embargo)

    def list(self):
        for name in self.tasks.list_updates():
            print name

    def delete(self):
        for name in self.args:
            self.tasks.delete_update(name)

    def show(self):
        for name in self.args:
            print self.tasks.show_update(name),

    def edit(self):
        for name in self.args:
            if any((self.opts.package, self.opts.distro, self.opts.cve,
                    self.opts.embargo)):
                # wants to perform inline edit
                self.tasks.modify_update(name, packages=self.opts.package,
                        distros=self.opts.distro, cves=self.opts.cve,
                        embargo=self.opts.embargo)
            else:
                # open a visual editor
                raw = self.tasks.dump_update(name)
                tf = tempfile.NamedTemporaryFile(prefix="sekt-update-",
                        suffix=".conf")
                tf.write("# be aware that CVEs, package names and dates will "
                        "not be checked now\n")
                tf.write(raw)
                tf.flush()
                oldstat = os.stat(tf.name)
                editor = (os.getenv("SEKT_VISUAL") or os.getenv("VISUAL") or
                        os.getenv("EDITOR", "vi"))
                cmd = subprocess.list2cmdline([editor, tf.name])
                ret = os.system(cmd)
                tf.seek(0)
                raw = tf.read()
                if ret != 0:
                    raise Error("editor command failed with %d: %s" %
                            (ret, cmd))
                newstat = os.stat(tf.name)
                if newstat.st_mtime > oldstat.st_mtime:
                    self.tasks.save_update(name, raw)
                    print "Update saved."
                else:
                    print "No changes in update."

Kcve().main()
# vim:ts=4:sw=4:et
