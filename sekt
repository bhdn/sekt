#!/usr/bin/python
import sys
import os

def parse_options(args):
    import optparse
    def parse_option(option, opt_str, value, parser, *args, **kwargs):
        kv = value.split("=", 1)
        if len(kv) != 2:
           raise optparse.OptionValueError, "-o accepts values only in "\
                   "the name=value form"
        levels = kv[0].split(".")
        lastv = kv[1]
        for name in levels[:0:-1]:
            lastv = {name: lastv}
        parser.values.config_options[levels[0]] = lastv
    parser = optparse.OptionParser("%prog [options]")
    parser.set_defaults(config_options={})
    parser.add_option("--parse-kernel-changelogs", action="store_true",
            default=False, help="Load kernel changelogs into database")
    parser.add_option("--kci", type="string", default=None,
            help="find kernel releases with a given commit message (strict"
                 " by default)")
    parser.add_option("--kreleases", action="store_true", default=False,
            help="list all kernel releases")
    parser.add_option("--kcve", type="string", metavar="KERNELVER",
            default="",
            help="find possible CVE fixes in kernel releases")
    parser.add_option("--kcommits", type="string", default=None,
            help="list commits from a given kernel release")
    parser.add_option("-s", "--strict", action="store_true", default=False,
            help="search using exact match")
    parser.add_option("--kcommit", type="string", nargs=1,
            help="get the first line of a given kernel commit (from "
            "tree pool)")
    parser.add_option("--mkupd", type="string", nargs=1, default=None,
            help="create a new update tracker")
    parser.add_option("--upd", type="string", nargs=1, default=None,
            help="show an update")
    parser.add_option("--list-upd", action="store_true", default=False,
            help="list all active updates")
    parser.add_option("--with-pkg", action="append", default=[],
            help="bind a package to the update")
    parser.add_option("--with-distro", metavar="DISTRO", action="append", default=[],
            help="bind a distro to a given update")
    parser.add_option("--with-cve", metavar="CVE", action="append",
            default=[], help="bind a CVE id to a given update")
    parser.add_option("--embargo", metavar="DD/MM/YYYY", type="string",
            help="bind a CVE id to a given update")
    parser.add_option("-y", "--fuzzy", action="store_true", default=False,
            help="search using approximate search (as in urpmq -y)")
    parser.add_option("--showrc", action="store_true", default=False,
            help="dump sekt configuration")
    parser.add_option("-v", "--verbose", action="store_true", default=False)
    parser.add_option("-o", "--option", type="string", action="callback",
            callback=parse_option,
            help="set one configuration option in the form opt=val")
    parsed = parser.parse_args(args)
    return parsed

def run(options, args):
    from mdv.sec.tasks import Interface, Config, SecteamTasks, Error
    config = Config()
    config.merge(options.config_options)
    path = (os.environ.get(config.conf.path_environment) or
            os.path.expanduser(os.path.join("~", config.conf.user_file)))
    if os.path.exists(path):
        config.load(path)
    tasks = SecteamTasks(config)
    interface = Interface(config, tasks)
    try:
        try:
            if options.kci:
                interface.find_kernel_commit(options)
            if options.kreleases:
                interface.list_kernel_releases()
            if options.kcommits:
                interface.list_kernel_commits(options)
            if options.kcommit:
                interface.get_kernel_commit(options)
            if options.kcve:
                interface.find_kernel_cves(options)
            if options.mkupd:
                interface.create_update(options)
            if options.upd:
                interface.show_update(options)
            if options.list_upd:
                interface.list_updates()
        finally:
            tasks.finish()
    except Error, e:
        sys.stderr.write("error: %s\n" % e)
        sys.exit(1)
    except KeyboardInterrupt:
        sys.stderr.write("interrupted\n")
        sys.exit(1)

def setup_logging(options):
    import logging
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.ERROR)

def main():
    options, args = parse_options(sys.argv)
    setup_logging(options)
    run(options, args)

if __name__ == "__main__":
    main()
